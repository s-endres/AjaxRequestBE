@model RequestApp.Models.Book

@{
    ViewBag.Title = "Edit";
}
<!-- DataTables JavaScript -->
<script src="/bower_components/datatables/media/js/jquery.dataTables.min.js"></script>
<script src="/bower_components/datatables-plugins/integration/bootstrap/3/dataTables.bootstrap.min.js"></script>

<h2>Edit</h2>

<Script>
    $(document).ready(function () {

        $.urlParam = function (name) {
            var results = new RegExp('[\?&]' + name + '=([^&#]*)').exec(window.location.href);
            return results[1] || 0;
        }

        $eDTable = $('#dTable').DataTable({

            responsive: true,
            "columnDefs": [
                {
                    "targets": [4],
                    "sortable": false
                }
            ]

        });

        $.ajax({
            type: "GET",
            url: "http://localhost:61232/Books/GetSingleBook",
            data: ({
                BookId: $.urlParam('BookId')
            }),
            dataType: "json",
            contentType: 'application/json; charset=utf-8',
            success: function (Data) {
                if (Data) {
                    $("#BookId").val(Data.BookId);
                    $("#Title").val(Data.Title);
                    $("#Description").val(Data.Description);
                    $("#ImageUrl").val(Data.ImageUrl);
                    $("#Publisher").val(Data.Publisher);
                    $("#PublicationYear").val(Data.PublicationYear); 
                } else {
                    pError();
                }
            },
            error: function () {
                pError();
            }
        });

        $('tbody').on('click', '.glyphicon-trash', function () {
            $eDTable.row($(this).parents("tr")).remove().draw();
        });

        $('tbody').on('click', '.glyphicon-folder-open', function () {
            DynamicModal(true);
        });


        $('tbody').on('click', '.glyphicon-edit', function () {
            DynamicModal(false);
            $('#myModal').modal('show'); 
        })

        $('#btnEdit').on('click', function () {

            if (validateMyForm() && validateMyDTable()) {

                var authors = [];

                $($eDTable.rows().data()).each(function (index, row) {
                    var authorObj = {
                        FirstName: row[0],
                        SecondName: row[1],
                        FirstLastName: row[2],
                        SecondLastName: row[3]
                    }

                    authors.push(authorObj);

                });

                $.ajax({
                    type: "GET",
                    url: "http://localhost:61232/Books/getSingleBook",
                    dataType: "json",
                    contentType: 'application/json; charset=utf-8',
                    data: { bookId: $.urlParam("bookId") },
                    success: function (data) {
                        if (data === false) {
                            window.location.replace("http://localhost:61232/Books/");
                        } else {
                            $("#Title").val(data.Title);
                            $("#Description").val(data.Description);
                            $("#ImageUrl").val(data.ImageUrl);
                            $("#Publisher").val(data.Publisher);
                            $("#PublicationYear").val(data.PublicationYear);
                            var Data = [];
                            for (var i = 0; i < data.Authors.length; i++) {
                                var Array = [
                                    data.Authors[i].FirstName,
                                    data.Authors[i].SecondName,
                                    data.Authors[i].FirstLastName,
                                    data.Authors[i].SecondLastName,
                                    "<span class='glyphicon glyphicon-remove-circle'> | </span>" +
                                    "<span class='glyphicon glyphicon-ok-circle'></span>"
                                ];
                                Data.push(Array);
                            }
                            $edTable.rows.add(Data).draw();
                        }
                    },
                    error: function () {
                        window.location.replace("http://localhost:61232/Books/");
                    }
                });

                $("#btnEdit").click(function () {
                    if (validateMyForm && validateMyDTable()) {
                        var authors = [];

                        for (var i = 0; i < $edTable.data().length; i++) {
                            var authorObj = {
                                FirstName: $edTable.data()[i][0],
                                SecondName: $edTable.data()[i][1],
                                FirstLastName: $edTable.data()[i][2],
                                SecondLastName: $edTable.data()[i][3]
                            };
                            authors.push(authorObj);
                        } 

                        $.ajax({
                            type: "PUT",
                            url: "http://localhost:61232/Books/UpdateBook",
                            dataType: "json",
                            contentType: 'application/json; charset=utf-8',
                            data: JSON.stringify({
                                BookId: parseInt($.urlParam("bookId")),
                                Title: $("#Title").val(),
                                Description: $("#Description").val(),
                                ImageUrl: $("#ImageUrl").val(),
                                Publisher: $("#Publisher").val(),
                                PublicationYear: $("#PublicationYear").val(),
                                Authors: authors()
                            }),
                            success: function (data) {
                                if (data) {
                                    window.location.replace("http://localhost:61232/Books/");
                                } else {
                                    pError();
                                }
                            },
                            error: function () {
                                pError();
                            }
                        });
                    }
                });
            }

        });
    });
     
    function pError() {
        if (!$("p[class='ErrorClass']").length) {
            $(".form-horizontal").append("<p class='ErrorClass' style='color: red;'>An error has occurred while loading the data </p>");
        }
    }

    function validateMyDTable() {
        var flag = true;

        if ($eDTable != null) {
            if ($eDTable.data().length <= 0) {
                $(this).addClass("Error");
                flag = false;
            } else {
                $(this).removeClass("Error");
            }
            return flag;

        }
    }

    function validateMyModalForm() {
        var flag = true;
        $('#myModalForm div input[type="text"]').each(function () {
            if ($.trim(this.value) == "") {
                $(this).addClass("Error");
                flag = false;
            } else {
                $(this).removeClass("Error");
            }
        });
        return flag;
    }

    function validateMyForm() {
        var flag = true;
        $("input[type='text']").each(function () {
            if ($(this).val().trim() == "") {
                SwapClass($(this).parent(), "has-success", "has-error");
                flag = false;
            } else {
                SwapClass($(this).parent(), "has-error", "has-success");
            }

        })

        $("input[type='number']").each(function () { 
            if ($(this).val().trim() == "" || $(this).val() <= 0) {
                SwapClass($(this).parent(), "has-success", "has-error");
                flag = false;
            } else {
                SwapClass($(this).parent(), "has-error", "has-success");
            }

        });
        return flag;
    }
    function SwapClass(ThisText, ClassR, ClassA) {
        $(ThisText).removeClass(ClassR);
        $(ThisText).addClass(ClassA);
    }

    function add() {
        if (validateMyModalForm()) {
            $eDTable.row.add([
                $("#firstInput").val(),
                $("#secondInput").val(),
                $("#thirdInput").val(),
                $("#fourthInput").val(),
                "<span class='glyphicon glyphicon-trash'></span> <span> | </span> " +
                "<span class='glyphicon glyphicon-edit'  ></span>"
            ]).draw();

            $("#myModalForm div input[type='text']").val("");
            $("#btnClose").click();
        }
    }

    function edit() {
        if (validateMyModalForm()) {
            $eDTable.row.add([
                $("#firstInput").val(),
                $("#secondInput").val(),
                $("#thirdInput").val(),
                $("#fourthInput").val(),
                "<span class='glyphicon glyphicon-trash'></span> <span> | </span> " +
                "<span class='glyphicon glyphicon-edit'></span>"
            ]).draw();

            $("#myModalForm div input[type='text']").val("");
            $("#btnClose").click();
        }
    }

    function DynamicModal(flag) {
        if (flag) {
            $("#btnAdd").css("display", "inline");
            $("#btnEdit").css("display", "none");
        } else {
            $("#btnEdit").css("display", "inline");
            $("#btnAdd").css("display", "none");
        }
        $('#myModal').modal('show');
    }

</Script>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Book</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.BookId)

        <div class="form-group">
            @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ImageUrl, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ImageUrl, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ImageUrl, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Publisher, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Publisher, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Publisher, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.PublicationYear, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.PublicationYear, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.PublicationYear, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="button" value="Save" class="btn btn-default" id="btnEdit" />
            </div>
        </div>
    </div>

    <div class="row">
        <div class="panel-heading">
            Authors |
            <span class="glyphicon glyphicon-folder-open" id="addRowGlyphicon" data-toggle="modal" data-target="#myModal">
            </span>
        </div>
        <table id="dTable" class="table table-striped table-bordered table-hover">
            <thead>
                <tr>
                    <th style="width: 200px;">First Name</th>
                    <th style="width: 200px;">Second Name</th>
                    <th style="width: 200px;">Lastname</th>
                    <th style="width: 200px;">Surname</th>
                    <th style="width: 200px;">Buttons</th>
                </tr>
            </thead>
            <tbody></tbody>

        </table>
    </div>

    <div class="modal" id="myModal">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title" id="myModalHeadAdd">Author</h4>
                    <h4 class="modal-title" id="myModalHeadEdit" style="display:none">Edit Row</h4>
                </div>
                <div id="myModalBody" class="modal-body">
                    <form id="myModalForm">
                        <div class="form-group">
                            <label for="recipient-name" class="control-label">First Name:</label>
                            <input type="text" class="form-control" id="firstInput">
                        </div>
                        <div class="form-group">
                            <label for="message-text" class="control-label">Second Name:</label>
                            <input type="text" class="form-control" id="secondInput">
                        </div>
                        <div class="form-group">
                            <label for="message-text" class="control-label">LastName:</label>
                            <input type="text" class="form-control" id="thirdInput">
                        </div>
                        <div class="form-group">
                            <label for="message-text" class="control-label">Surname:</label>
                            <input type="text" class="form-control" id="fourthInput">
                        </div>

                        <input type="text" class="form-control" style="display:none" id="hiddenInput">
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" id="btnClose" class="btn btn-default" data-dismiss="modal">Close</button>
                    <button type="button" id="btnAdd" class="btn btn-primary" onclick="add()">Add Author</button>
                    <button type="button" id="btnEdit" class="btn btn-primary" style="display:none" onclick="edit()">Edit</button>
                </div>
            </div>
        </div>
    </div>

}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
