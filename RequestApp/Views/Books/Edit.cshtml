@model RequestApp.Models.Book

@{
    ViewBag.Title = "Edit";
}

<h2>Edit</h2>
<style>
    .Error {
        border: solid 2px red;
    }
</style>
<Script>
    $(document).ready(function () {
        $.urlParam = function (name) {
            var results = new RegExp('[\?&]' + name + '=([^&#]*)').exec(window.location.href);
            return results[1] || 0;
        }

        $.ajax({
            type: "GET",
            url: "http://localhost:61232/Books/getSingleBook",
            dataType: "json",
            contentType: 'application/json; charset=utf-8',
            data: { bookId: parseInt($.urlParam("bookId")) },
            success: function (data) {
                if (data === false) {
                    window.location.replace("http://localhost:61232/Books/");
                } else {
                    $("#Title").val(data.Title);
                    $("#Description").val(data.Description);
                    $("#ImageUrl").val(data.ImageUrl);
                    $("#Publisher").val(data.Publisher);
                    $("#PublicationYear").val(data.PublicationYear);
                }
            },
            error: function () {
                window.location.replace("http://localhost:61232/Books/");
            }
        });

        $("#btnEdit").click(function () {
            if (Validate()) {
                $.ajax({
                    type: "PUT",
                    url: "http://localhost:61232/Books/UpdateBook",
                    dataType: "json",
                    contentType: 'application/json; charset=utf-8',
                    data: JSON.stringify({
                        BookId: parseInt($.urlParam("bookId")),
                        Title: $("#Title").val(),
                        Description: $("#Description").val(),
                        ImageUrl: $("#ImageUrl").val(),
                        Publisher: $("#Publisher").val(),
                        PublicationYear: $("#PublicationYear").val()
                    }),
                    success: function (data) {
                        if (data) {
                            window.location.replace("http://localhost:61232/Books/");
                        } else {
                            AddRemove("Alert", "Error", "No me edité");
                        }
                    },
                    error: function () {
                        AddRemove("Error", "Alert", "Me caí");
                    }
                });
            }
        });
    });

    function Validate() {
        var validation = true;
        $(".form-control").each(function () {
            if ($(this).val().trim() == '' || $(this).val() < 0) {
                $(this).addClass("Error");
                validation = false;
            } else {
                $(this).removeClass("Error");
            }
        });
        return validation;
    }

    function AddRemove(idAdd, idRemove, Text) {
        if (!$("#" + idAdd).length) {
            $("#" + idRemove).remove();
            $(".form-horizontal").prepend('<div class="alert alert-danger" id="' + idAdd + '"><strong>Warning! </strong>' + Text + '</div >');
        }
    }
</Script>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <h4>Book</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.BookId)

        <div class="form-group">
            @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ImageUrl, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ImageUrl, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ImageUrl, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Publisher, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Publisher, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Publisher, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.PublicationYear, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.PublicationYear, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.PublicationYear, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="button" value="Save" class="btn btn-default" id="btnEdit"/>
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
