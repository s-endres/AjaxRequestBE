@model RequestApp.Models.Book

@{
    ViewBag.Title = "Edit";
}
<!-- DataTables JavaScript -->
<script src="/bower_components/datatables/media/js/jquery.dataTables.min.js"></script>
<script src="/bower_components/datatables-plugins/integration/bootstrap/3/dataTables.bootstrap.min.js"></script>
<link href="/bower_components/select2/css/select2.min.css" rel="stylesheet" type="text/css">
<script src="/bower_components/select2/js/select2.min.js"></script>
<!-- Summernote -->
<link href="/bower_components/summernote/css/summernote.css" rel="stylesheet" type="text/css">
<script src="/bower_components/summernote/js/summernote.min.js"></script>
<!-- Custom Fonts -->
<link href="/bower_components/font-awesome/css/font-awesome.min.css" rel="stylesheet" type="text/css">
 

<h2>Edit</h2>

<Script>
    $(document).ready(function () {

        $.urlParam = function (name) {
            var results = new RegExp('[\?&]' + name + '=([^&#]*)').exec(window.location.href);
            return results[1] || 0;
        }

        $eDTable = $('#dTable').DataTable({

            responsive: true,
            "columnDefs": [
                {
                    "targets": [4],
                    "sortable": false
                }
            ]

        });
       
        $summernote = $(".summernote").summernote({
            height: 100
        });

        $.ajax({
            type: "GET",
            url: "http://localhost:61232/Books/getGenres",
            data: "",
            dataType: "json",
            contentType: 'application/json; charset=utf-8',
            success: function (Data) {
                $.each(Data, function () {
                    $("#slct2").append("<option value='" + this.GenreId + "'>" + this.Name + "</option>");
                });
            },
            error: function () {
                pError();
            }
        });

        $.ajax({
            type: "GET",
            url: "http://localhost:61232/Books/getStatutes",
            data: "",
            dataType: "json",
            contentType: 'application/json; charset=utf-8',
            success: function (Data) {
                $.each(Data, function () {
                    $("#slct1").append("<option value='" + this.StatusId + "'>" + this.Name + "</option>");
                });
            },
            error: function () {
                pError();
            }
        });

        
        $.ajax({
            type: "GET",
            url: "http://localhost:61232/Books/GetSingleBook",
            data: ({
                BookId: $.urlParam('BookId')
            }),
            dataType: "json",
            contentType: 'application/json; charset=utf-8',
            success: function (Data) {
                if (Data) {
                    $("#BookId").val(Data.BookId);
                    $("#Title").val(Data.Title);
                    $summernote.code(Data.Description);
                    $("#ImageUrl").val(Data.ImageUrl);
                    $("#Publisher").val(Data.Publisher);
                    $("#PublicationYear").val(Data.PublicationYear);
                    $("#slct2").val(Data.GenreIds).trigger('change'); 
                    $("#slct1").val(Data.StatusId).trigger('change'); 

                    var AuthorsData = [];
                    for (var i = 0; i < Data.Authors.length; i++) {
                        var AuthorsArray = [
                            Data.Authors[i].FirstName,
                            Data.Authors[i].SecondName,
                            Data.Authors[i].FirstLastName,
                            Data.Authors[i].SecondLastName,
                            "<span class='glyphicon glyphicon-edit'> | </span>" +
                            "<span class='glyphicon glyphicon-trash'></span>"
                        ];
                        AuthorsData.push(AuthorsArray);
                    }
                    $eDTable.rows.add(AuthorsData).draw();
                } else {
                    pError();
                }
            },
            error: function () {
                pError();
            }
        });

        $("#slct2").select2({
            placeholder: "Select a Genre",
            allowClear: true
        });

        $("#slct1").select2({
            placeholder: "Select Status"
        }); 

        $(document).on('click', '.glyphicon-folder-open', function () {
            $('.modal-body input[type="text"]').val("").parent().removeClass("has-success");
            DynamicModal(true);
        });

        $('tbody').on('click', '.glyphicon-trash', function () {
            $("#myDeleteModal").modal();
            var RowHTML = $(this).parents('tr');
            $("#hiddenInput").val($eDTable.row(RowHTML).index());
        });

        $('#deleteBtn').click(function () {
            var rowIndex = $("#hiddenInput").val();
            $eDTable.row(rowIndex).remove().draw();
            console.log(rowIndex);
        });

        $('tbody').on('click', '.glyphicon-edit', function () {

            var Parent = $(this).parents("tr");
            var index = $eDTable.row(Parent).index();
            var dataArray = $eDTable.row(index).data();
            $("#firstInput").val(dataArray[0]);
            $("#secondInput").val(dataArray[1]);
            $("#thirdInput").val(dataArray[2]);
            $("#fourthInput").val(dataArray[3]);
            $("#hiddenInput").val(index);

            DynamicModal(false);
        })

        $("#btnEdit").click(function () {
            if (validateMyForm() && validateMyDTable()) {
                var AuthorsArray = [];

                for (var i = 0; i < $eDTable.data().length; i++) {
                    var Authors = {
                        FirstName: $eDTable.data()[i][0],
                        SecondName: $eDTable.data()[i][1],
                        FirstLastName: $eDTable.data()[i][2],
                        SecondLastName: $eDTable.data()[i][3]
                    };
                    AuthorsArray.push(Authors);
                }

                $.ajax({
                    type: "PUT",
                    url: "http://localhost:61232/Books/UpdateBook",
                    dataType: "json",
                    contentType: 'application/json; charset=utf-8',
                    data: JSON.stringify({
                        BookId: parseInt($.urlParam("BookId")),
                        Title: $("#Title").val(),
                        Description: $summernote.code(),
                        ImageUrl: $("#ImageUrl").val(),
                        Publisher: $("#Publisher").val(),
                        PublicationYear: $("#PublicationYear").val(),
                        Authors: AuthorsArray
                    }),
                    success: function (data) {
                        if (data) {
                            window.location.replace("http://localhost:61232/Books/");
                        } else {

                        }
                    },
                    error: function () {

                    }
                });
            }
        });

    });

    function pError() {
        if (!$("p[class='ErrorClass']").length) {
            $(".form-horizontal").append("<p class='ErrorClass' style='color: red;'>An error has occurred while loading the data </p>");
        }
    }

    function validateMyDTable() {
        var flag = true;

        if ($eDTable != null) {
            if ($eDTable.data().length <= 0) {
                if (!$('.alert-danger').length) {
                    $(".form-horizontal").append("<div class='alert alert-danger'><strong>Does not meet requirements. </strong>Author is required</div>");
                } else {
                    $('.alert-danger').remove();
                    $(".form-horizontal").append("<div class='alert alert-danger'><strong>Does not meet requirements. </strong>Author is required</div>");
                }
                flag = false;
            }
            return flag;
        } 
    }

    function validateMyModalForm() {
        var flag = true;

        $('#myModal div input[type="text"]:not(#hiddenInput)').each(function () {
            if ($(this).val().trim() == "") {
                $(this).parent().addClass("has-error").removeClass("has-success");
                flag = false;
            } else {
                $(this).parent().addClass("has-success").removeClass("has-error");
            }
        });
        return flag;
    }

    function validateMyForm() {
        var flag = true;
        //form inputs
        $(".single-line").each(function () {
            if ($(this).val().trim() == "") {
                SwapClass($(this).parent(), "has-success", "has-error");
                flag = false;
            } else {
                SwapClass($(this).parent(), "has-error", "has-success");
            }

        })
        //numeric input
        $(".form-horizontal div input[type='number']").each(function () {
            if ($(this).val().trim() == "" || $(this).val() <= 0) {
                SwapClass($(this).parent(), "has-success", "has-error");
                flag = false;
            } else {
                SwapClass($(this).parent(), "has-error", "has-success");
            }
        });

        //WYSWYG input
        if ($summernote.code()=="") {
            flag = false;
            if (!$('.alert-danger').length) {
                $(".form-horizontal").append("<div class='alert alert-danger'><strong>Does not meet requirements. </strong>Description is required.</div>");
            } else {
                $('.alert-danger').remove();
                $(".form-horizontal").append("<div class='alert alert-danger'><strong>Does not meet requirements. </strong>Description is required.</div>");
            }
        } else {
            SwapClass($(this).parents(), "has-error", "has-success");
        }
        //Genre selector
        if ($("#slct2").val() == null) {
            flag = false;
            if (!$('.alert-danger').length) { 
                $(".form-horizontal").append("<div class='alert alert-danger'><strong>Does not meet requirements. </strong>Genre is required.</div>");
            } else {
                $('.alert-danger').remove();
                $(".form-horizontal").append("<div class='alert alert-danger'><strong>Does not meet requirements. </strong>Genre is required.</div>");
            }
        } 
        return flag;
    }

    function SwapClass(ThisText, ClassR, ClassA) {
        $(ThisText).removeClass(ClassR);
        $(ThisText).addClass(ClassA);
    }

    function add() {
        if (validateMyModalForm()) {
            $eDTable.row.add([
                $("#firstInput").val(),
                $("#secondInput").val(),
                $("#thirdInput").val(),
                $("#fourthInput").val(),
                "<span class='glyphicon glyphicon-edit'> | </span>" +
                "<span class='glyphicon glyphicon-trash'></span>"
            ]).draw();

            $("#myModalForm div input[type='text']").val("");
            $("#btnClose").click();
            if ($('.alert-danger').length) {
                $('.alert-danger').remove();
            }
        }
    }

    function edit() {
        if (validateMyModalForm()) {
            var hidden = $("#hiddenInput").val();
            $eDTable.row(hidden).data([
                $("#firstInput").val(),
                $("#secondInput").val(),
                $("#thirdInput").val(),
                $("#fourthInput").val(),
                "<span class='glyphicon glyphicon-edit'> | </span>" +
                "<span class='glyphicon glyphicon-trash'></span>"

            ]).draw();
            $("#myModal").modal("hide");
        }
    }

    function DynamicModal(flag) {
        if (flag) {
            $("#btnAdd").css("display", "inline");
            $("#btnEdit2").css("display", "none");
        } else {
            $("#btnEdit2").css("display", "inline");
            $("#btnAdd").css("display", "none");
        }
        $('#myModal').modal('show');
    }

</Script>



@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Book</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.BookId)

        <div class="form-group">
            @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @*@Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })*@
                <textarea id="DescriptionSummernote" class="summernote"></textarea>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ImageUrl, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ImageUrl, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ImageUrl, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Publisher, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Publisher, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Publisher, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.PublicationYear, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.PublicationYear, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.PublicationYear, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <label class="control-label col-md-2">Genre</label>
            <div class="col-md-10">
                <select id="slct2" class="form-control" multiple></select>
            </div>
        </div>

        <div class="form-group">
            <label class="control-label col-md-2">Status</label>
            <div class="col-md-10">
                <select id="slct1" class="form-control"></select>
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="button" value="Save" class="btn btn-default" id="btnEdit" />
            </div>
        </div>
    </div>

    <div class="row">
        <div class="panel-heading">
            Authors |
            <span class="glyphicon glyphicon-folder-open" id="addRowGlyphicon" data-toggle="modal" data-target="#myModal">
            </span>
        </div>
        <table id="dTable" class="table table-striped table-bordered table-hover">
            <thead>
                <tr>
                    <th style="width: 200px;">First Name</th>
                    <th style="width: 200px;">Second Name</th>
                    <th style="width: 200px;">Lastname</th>
                    <th style="width: 200px;">Surname</th>
                    <th style="width: 200px;">Buttons</th>
                </tr>
            </thead>
            <tbody></tbody>

        </table>
    </div>

        <div class="modal" id="myModal">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h4 class="modal-title" id="myModalHeadAdd">Author</h4>
                    </div>
                    <div id="myModalBody" class="modal-body">
                        <form id="myModalForm">
                            <div class="form-group">
                                <label for="recipient-name" class="control-label">First Name:</label>
                                <input type="text" class="form-control" id="firstInput">
                            </div>
                            <div class="form-group">
                                <label for="message-text" class="control-label">Second Name:</label>
                                <input type="text" class="form-control" id="secondInput">
                            </div>
                            <div class="form-group">
                                <label for="message-text" class="control-label">LastName:</label>
                                <input type="text" class="form-control" id="thirdInput">
                            </div>
                            <div class="form-group">
                                <label for="message-text" class="control-label">Surname:</label>
                                <input type="text" class="form-control" id="fourthInput">
                            </div>

                            <input type="text" class="form-control" style="display:none" id="hiddenInput">
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button type="button" id="btnClose" class="btn btn-default" data-dismiss="modal">Close</button>
                        <button type="button" id="btnAdd" class="btn btn-primary" onclick="add()">Add Author</button>
                        <button type="button" id="btnEdit2" class="btn btn-primary" style="display:none" onclick="edit()">Edit</button>
                    </div>
                </div>
            </div>
        </div>

        <div>
            <div class="modal fade" id="myDeleteModal" role="checkbox">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h4 class="modal-title">Delete Confirmation</h4>
                        </div>
                        <div class="modal-body">
                            <p>Sure you want to delete?</p>
                            <input type="text" class="form-control" style="display:none" id="hiddenInput">
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-default" id="deleteBtn" data-dismiss="modal">Delete</button>
                            <button type="button" class="btn btn-default" id="cancelBtn" data-dismiss="modal">Cancel</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
