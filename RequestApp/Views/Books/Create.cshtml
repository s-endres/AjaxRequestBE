@model RequestApp.Models.Book

@{
    ViewBag.Title = "Create";
}
<!-- MetisMenu CSS -->
<link href="/bower_components/metisMenu/dist/metisMenu.min.css" rel="stylesheet">
<!-- DataTables CSS -->
<link href="/bower_components/datatables-plugins/integration/bootstrap/3/dataTables.bootstrap.css" rel="stylesheet">
<!-- DataTables Responsive CSS -->
<link href="/bower_components/datatables-responsive/css/dataTables.responsive.css" rel="stylesheet">
<!-- Custom Fonts -->
<link href="/bower_components/font-awesome/css/font-awesome.min.css" rel="stylesheet" type="text/css">
<script src="/bower_components/bootstrap/dist/js/bootstrap.min.js"></script>
<!-- DataTables JavaScript -->
<script src="/bower_components/datatables/media/js/jquery.dataTables.min.js"></script>
<script src="/bower_components/datatables-plugins/integration/bootstrap/3/dataTables.bootstrap.min.js"></script>

<link href="/bower_components/select2/css/select2.min.css" rel="stylesheet" type="text/css">
<script src="/bower_components/select2/js/select2.min.js"></script>

<!-- Summernote -->
<link href="/bower_components/summernote/css/summernote.css" rel="stylesheet" type="text/css">
<script src="/bower_components/summernote/js/summernote.min.js"></script>
<!-- Custom Fonts -->
<link href="/bower_components/font-awesome/css/font-awesome.min.css" rel="stylesheet" type="text/css">

<h2>Create</h2>
<style>
    #hidden, #deleteHidden {
        display: none;
    }

    .Error {
        border: solid 1px red;
    }

    .glyphicon:hover {
        cursor: pointer;
    }
</style>
<script>
    $(document).ready(function () {
        $table = $('#myTable').DataTable({
            responsive: true,
            "columnDefs": [
                {
                    "targets": [4],
                    "orderable": false
                }
            ]
        });

        $Summernote = $("#Description").summernote();

        $("#Select1").select2({
            placeholder: "Select a statuts",
            allowClear: true
        });

        $("#Select2").select2({
            placeholder: "Select a genre",
        });

        $.get("http://localhost:61232/Books/getStatutes", function (data) {
            for (var i = 0; i < data.length; i++) {
                $("#Select1").append('<option value="' + data[i].StatusId + '">' + data[i].Name + '</option>');
            }
        });

        $.get("http://localhost:61232/Books/getGenres", function (data) {
            for (var i = 0; i < data.length; i++) {
                $("#Select2").append('<option value="' + data[i].GenreId + '">' + data[i].Name + '</option>');
            }
        });

        $('#btnAdd').click(function () {
            ButtonChange(true);
        });

        $('#myModal').on('hidden.bs.modal', function () {
            $('#myModal input[class="form-control"]').val("");
        });

        $('#btnCreate').click(function () {
            if (Validate(".myForm")) {
                var Data = getInputsData();
                $("#myTable").DataTable().row.add(Data).draw();
                $("#myModal").modal("hide");
            }
        });

        $("#btnSave").click(function () {
            console.log($("#Select1").val());
            console.log($("#Select2").val());
            if (Validate(".form-horizontal") && ValidateTable() && validateSelect() && validateTextArea()) {
                console.log($("#Description").val());
                var Arreglo = GetAuthors();
                $.ajax({
                    type: "POST",
                    url: "http://localhost:61232/Books/AddNewBook",
                    dataType: "json",
                    contentType: 'application/json; charset=utf-8',
                    data: JSON.stringify({
                        Title: $("#Title").val(),
                        Description: $("#Description").code(),
                        ImageUrl: $("#ImageUrl").val(),
                        Publisher: $("#Publisher").val(),
                        PublicationYear: $("#PublicationYear").val(),
                        Authors: GetAuthors(),
                        GenreIds: $("#Select2").val(),
                        StatusId: $("#Select1").val()
                    }),
                    success: function (data) {
                        if (data) {
                            window.location.replace("http://localhost:61232/Books/");
                        } else {
                            AddRemove("Alert", "Error");
                        }
                    },
                    error: function () {
                        AddRemove("Error", "Alert");
                    }
                });
            }
        });

        $("#btnDelete").click(function () {
            $("#modalDelete").modal("toggle");
            var Index = $table.row($("#deleteHidden").val());
            Index.remove().draw();
        });
    });

    $(document).on("click", ".glyphicon-remove-circle", function () {
        var Parent = $(this).parents("tr");
        $("#deleteHidden").val($table.row(Parent).index());
        $("#modalDelete").modal('show');
    });

    $(document).on("click", ".glyphicon-ok-circle", function () {
        var Parent = $(this).parents("tr");
        ButtonChange(false);
        var index = $("#myTable").DataTable().row(Parent).index();
        var array = $("#myTable").DataTable().row(index).data();
        $("#IdFirstInput").val(array[0]);
        $("#IdSecondInput").val(array[1]);
        $("#IdThirdInput").val(array[2]);
        $("#IdFourthInput").val(array[3]);
        $("#hidden").val(index);
    });

    $(document).on("click", "#btnUpdate", function () {
        if (Validate(".myForm")) {
            var idx = $("#hidden").val();
            $("#myTable").DataTable().row(idx).data(getInputsData()).draw();
            $("#myModal").modal("hide");
        }
    });

    function Validate(Zone) {
        var validation = true;
        $(Zone + " .formControlClass").not("#hidden").not("#deleteHidden").not("#Select1").not("#Select2").each(function () {
            if ($(this).val() == null || $(this).val().trim() == '' || $(this).val() < 0) {
                $(this).addClass("Error");
                validation = false;
            } else {
                $(this).removeClass("Error");
            }
        });
        return validation;
    }

    function AddRemove(idAdd, Text) {
        if (!$("#" + idAdd).length) {
            $(".alert").remove();
            $(".form-horizontal").prepend('<div class="alert alert-danger" id="' + idAdd + '"><strong>Warning! </strong>' + Text + '</div >');
        }
    }

    function ButtonChange(create) {
        if (create) {
            $("#btnCreate").css("display", "inline");
            $("#btnUpdate").css("display", "none");
        } else {
            $("#btnUpdate").css("display", "inline");
            $("#btnCreate").css("display", "none");
        }
        $('#myModal').modal('show');
    }

    function getInputsData() {
        return [$("#IdFirstInput").val(),
        $("#IdSecondInput").val(),
        $("#IdThirdInput").val(),
        $("#IdFourthInput").val(),
        "<span class='glyphicon glyphicon-remove-circle'> | </span>" +
        "<span class='glyphicon glyphicon-ok-circle'></span>"];
    }

    function GetAuthors() {
        var Arreglo = [];
        for (var i = 0; i < $table.data().length; i++) {
            console.log($table.data()[i])
            var Author = {
                FirstName: $table.data()[i][0],
                SecondName: $table.data()[i][1],
                FirstLastName: $table.data()[i][2],
                SecondLastName: $table.data()[i][3]
            };
            Arreglo.push(Author);
        }
        console.log(Arreglo);
        return Arreglo;
    }

    function ValidateTable() {
        if ($table.data().length == 0) {
            AddRemove("Table", "Agregue autores");
            return false;
        }
        return true;
    }

    function validateSelect() {
        validate = true;
        if ($("#Select2").val() == null) {
            validate = false;
            AddRemove("Select", "Select something in genre");
        }
        return validate;
    }

    function validateTextArea() {
        if ($("#Description").code() == "<p><br></p>") {
            AddRemove("DescriptionAlert", "Empty description");
            return false;
        }
        return true;
    }
</script>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Book</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control formControlClass" } })
                @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <textarea id="Description"></textarea>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ImageUrl, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ImageUrl, new { htmlAttributes = new { @class = "form-control formControlClass" } })
                @Html.ValidationMessageFor(model => model.ImageUrl, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Publisher, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Publisher, new { htmlAttributes = new { @class = "form-control formControlClass" } })
                @Html.ValidationMessageFor(model => model.Publisher, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.PublicationYear, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <input type="number" id="PublicationYear" name="PublicationYear" class="form-control" />
                @Html.ValidationMessageFor(model => model.PublicationYear, "", new { @class = "text-danger formControlClass" })
            </div>
        </div>
        <div class="form-group">
            <label class="control-label col-md-2">Status</label>
            <div class="col-md-10">
                <select id="Select1" class="form-control"></select>
            </div>
        </div>
        <div class="form-group">
            <label class="control-label col-md-2">Genre</label>
            <div class="col-md-10">
                <select id="Select2" class="form-control" multiple></select>
            </div>
        </div>
    </div>

    <table id="myTable" width="100%">
        <thead>
            <tr>
                <th>First Name</th>
                <th>Second Name</th>
                <th>First Last Name</th>
                <th>Second Last Name</th>
                <th>Buttons</th>

            </tr>
        </thead>
        <tbody></tbody>
    </table>
    <button type="button" class="btn btn-info btn-lg" id="btnAdd">Add author</button>
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="button" id="btnSave" value="Create" class="btn btn-default" />
            </div>
        </div>

        <div id="myModal" class="modal fade" role="dialog">
            <div class="modal-dialog">
                <!-- Modal content-->
                <div class="modal-content myForm">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal">&times;</button>
                        <h4 class="modal-title">Modal Header</h4>
                    </div>
                    <div class="modal-body">
                        <div class="form-group">
                            <label for="IdFirstInput">First Name:</label>
                            <input type="text" class="form-control formControlClass" id="IdFirstInput">
                        </div>
                        <div class="form-group">
                            <label for="IdSecondInput">Second Name:</label>
                            <input type="text" class="form-control formControlClass" id="IdSecondInput">
                        </div>
                        <div class="form-group">
                            <label for="IdThirdInput">Last Name:</label>
                            <input type="text" class="form-control formControlClass" id="IdThirdInput">
                        </div>
                        <div class="form-group">
                            <label for="IdFourthInput">Surname:</label>
                            <input type="text" class="form-control formControlClass" id="IdFourthInput">
                        </div>
                        <input type="text" class="form-control" id="hidden">
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-default" data-dismiss="modal">Cancel</button>
                        <button type="button" class="btn btn-default" id="btnCreate">Create</button>
                        <button type="button" class="btn btn-default" id="btnUpdate">Update</button>
                    </div>
                </div>

            </div>
        </div>

        <div id="modalDelete" class="modal fade" role="dialog">
            <div class="modal-dialog">
                <!-- Modal content-->
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal">&times;</button>
                        <h4 class="modal-title">Delete</h4>
                    </div>
                    <div class="modal-body">
                        <p>Do you really want to delete this?<p>
                            <input type="text" class="form-control" id="deleteHidden">
                            <button type="button" class="btn btn-default" data-dismiss="modal">Cancel</button>
                            <button type="button" class="btn btn-default" id="btnDelete">Delete</button>
                    </div>
                    <div class="modal-footer">

                    </div>
                </div>

            </div>
        </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
